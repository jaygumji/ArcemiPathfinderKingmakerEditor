@page "/DevTools"
@inject IGameResourcesProvider Resources
@inject EditorConfiguration Config;

<div class="row">
    <div class="col-md-12">
        <h3>Generate definitions</h3>
    </div>
</div>

<div class="row">
    <div class="col-md-2">
        <button class="btn btn-info" @onclick="() => ProcureArmyUnitMappings()">
            <span class="oi oi-play-circle"></span>
            Army Mappings
        </button>
    </div>
    @foreach (var game in Config.Instance.Games.Where(g => g.ValidateGameFolder())) {
        <div class="col-md-2">
            <button class="btn btn-info" @onclick="() => GenerateBlueprintTypes(game)">
                <span class="oi oi-play-circle"></span>
                @game.DefinitionId blueprint types
            </button>
        </div>
    }
    <div class="col-md-4">
        <button class="btn btn-info" @onclick="() => GeneratePathfinderWotrBlueprintBackup()">
            <span class="oi oi-play-circle"></span>
            Pathfinder Wotr blueprint backup
        </button>
    </div>
    <div class="col-md-4">
        <button class="btn btn-info" @onclick="() => GeneratePathfinderWotrNaturalWeapons()">
            <span class="oi oi-play-circle"></span>
            Natural Weapons
        </button>
    </div>
    <div class="col-md-4">
        <button class="btn btn-info" @onclick="() => GeneratePathfinderKingmakerBlueprintAsync()">
            <span class="oi oi-play-circle"></span>
            Pathfinder Kingmaker blueprint backup
        </button>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <textarea class="form-control" style="height: 400px;" @bind="Output">
        </textarea>
    </div>
</div>

@code{
    private string Output;
    public void ProcureArmyUnitMappings()
    {
        var newArmyUnits = Resources.GetAvailableArmyUnits()
            .OrderBy(x => x.DisplayName)
            .Where(x => !Resources.Mappings.ArmyUnits.ContainsKey(x.Id));

        var b = new System.Text.StringBuilder();
        foreach (var au in newArmyUnits) {
            b.Append("\t\t{ \"id\": \"").Append(au.Id).Append("\", \"name\": \"").Append(au.DisplayName).AppendLine("\", \"size\": \"Default\"},");
        }
        Output = b.ToString();
    }

    public void GenerateBlueprintTypes(EditorGameConfiguration game) {
        var cheatDataFile = System.IO.Path.Combine(game.GameFolder, "Bundles", "cheatdata.json");
        if (!System.IO.File.Exists(cheatDataFile)) {
            Output = "Could not find cheatdata.json @ " + cheatDataFile;
        }
        string NameOf(string fn)
        {
            var commaIdx = fn.IndexOf(',');
            var n = commaIdx >= 0 ? fn.Substring(0, commaIdx) : fn;
            var dotIdx = n.LastIndexOf('.');
            n = dotIdx >= 0 && n.Length > dotIdx + 1 ? n.Substring(dotIdx + 1) : n;
            if (n.StartsWith("Blueprint", StringComparison.Ordinal)) {
                n = n.Remove(0, 9);
            }
            return n;
        }
        var serializer = new Newtonsoft.Json.JsonSerializer();
        using (var stream = new System.IO.FileStream(cheatDataFile, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.Read))
        using (var reader = new System.IO.StreamReader(stream))
        using (var jsonReader = new Newtonsoft.Json.JsonTextReader(reader)) {
            var cheatdata = serializer.Deserialize<BlueprintMetadataContainer>(jsonReader);
            var typeNames = cheatdata.Entries.Select(e => e.TypeFullName).Distinct(StringComparer.Ordinal).Select(x => new { Name = NameOf(x), FullName = x }).OrderBy(x => x.Name).ToArray();
            var b = new System.Text.StringBuilder();
            foreach (var typeName in typeNames) {
                b.AppendLine($"public static BlueprintType {typeName.Name} {{ get; }} = new BlueprintType(\"\", \"{typeName.FullName}\");");
            }
            b.AppendLine();
            b.AppendLine("private static readonly Dictionary<string, BlueprintType> LookupFullName = new Dictionary<string, BlueprintType>(StringComparer.Ordinal) {");
            foreach (var typeName in typeNames) {
                b.AppendLine($"\t{{{typeName.Name}.FullName, {typeName.Name}}},");
            }
            b.AppendLine("}");
            Output = b.ToString();
        }
    }

    private async Task GeneratePathfinderKingmakerBlueprintAsync()
    {
        var window = ElectronNET.API.Electron.WindowManager.BrowserWindows.First();
        var options = new ElectronNET.API.Entities.OpenDialogOptions {
            Title = "Select the blueprint file",
            Properties = new[] { ElectronNET.API.Entities.OpenDialogProperty.openFile }
        };
        var files = await ElectronNET.API.Electron.Dialog.ShowOpenDialogAsync(window, options);
        var file = files?.FirstOrDefault();
        if (!string.IsNullOrEmpty(file)) {
            using (var zip = SharpCompress.Archives.Zip.ZipArchive.Open(file, new SharpCompress.Readers.ReaderOptions())) {
                var entry = zip.Entries.FirstOrDefault(e => e.Key.IEq("Blueprints.txt"));
                if (entry is null) {
                    Output = "Couldn't find entry Blueprints.txt";
                    return;
                }
                var cheatdata = new System.Text.StringBuilder().Append("{\"Entries\":[");
                var errs = new System.Text.StringBuilder();
                using (var stream = entry.OpenEntryStream())
                using (var reader = new System.IO.StreamReader(stream)) {
                    await reader.ReadLineAsync();

                    int lineNo = 1;
                    var isFirst = true;
                    while (!reader.EndOfStream) {
                        lineNo++;
                        var line = reader.ReadLine();
                        var parts = line.Split('\t');
                        if (parts.Length != 3) {
                            errs.AppendLine("Could not read line " + lineNo);
                        }
                        else {
                            if (isFirst) isFirst = false;
                            else cheatdata.Append(",");
                            cheatdata.Append($"{{\"Name\":\"{parts[0]}\",\"Guid\":\"{parts[1]}\",\"TypeFullName\":\"{parts[2]}\"}}");
                        }
                    }
                    cheatdata.Append("]}");
                    Output = errs.Length > 0 ? errs.AppendLine().ToString() + cheatdata.ToString() : cheatdata.ToString();
                }
            }
        }
    }

    private void GeneratePathfinderWotrBlueprintBackup()
    {
        var game = Config.Instance.GetGame(GameDefinition.Pathfinder_WrathOfTheRighteous);
        var cheatDataFile = System.IO.Path.Combine(game.GameFolder, "Bundles", "cheatdata.json");
        if (!System.IO.File.Exists(cheatDataFile)) {
            Output = "Could not find cheatdata.json @ " + cheatDataFile;
        }
        var serializer = new Newtonsoft.Json.JsonSerializer();
        using (var stream = new System.IO.FileStream(cheatDataFile, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.Read))
        using (var reader = new System.IO.StreamReader(stream))
        using (var jsonReader = new Newtonsoft.Json.JsonTextReader(reader)) {
            var cheatdata = serializer.Deserialize<BlueprintMetadataContainer>(jsonReader);
            var res = (BlueprintProvider)game.GetDefinition().Resources.Blueprints;
            var types = new HashSet<string>(res.Types
                .Where(t => t.Category == BlueprintTypeCategory.Item
                    || t.FullName.IEnd(".BlueprintAbility")
                    || t.FullName.IEnd(".BlueprintBuff")
                    || t.FullName.IEnd(".BlueprintFeature")
                    || t.FullName.IEnd(".BlueprintRace")
                    || t.FullName.IEnd(".BlueprintUnitAsksList")
                    || t.FullName.IEnd(".BlueprintPortrait")
                    || t.FullName.IEnd(".BlueprintLeaderSkill")
                    || t.FullName.IEnd(".BlueprintUnlockableFlag")
                    || t.FullName.IEnd(".BlueprintRaceVisualPreset")
                    || t.FullName.IEnd(".BlueprintUnit")
                    || t.FullName.IEnd(".BlueprintAbilityResource")
                )
                .Select(t => t.FullName), StringComparer.Ordinal);

            for (var i = cheatdata.Entries.Count-1; i >= 0; i--) {
                var entry = cheatdata.Entries[i];
                if (!types.Contains(entry.TypeFullName)) cheatdata.Entries.RemoveAt(i);
            }
            var b = new System.Text.StringBuilder().Append("{\"Entries\":[");
            var isFirst = true;
            foreach (var entry in cheatdata.Entries) {
                if (isFirst) { isFirst = false; }
                else { b.Append(","); }
                b.Append($"{{\"Name\":\"{entry.Name}\",\"Guid\":\"{entry.Guid}\",\"TypeFullName\":\"{entry.TypeFullName}\"}}");
            }
            b.Append("]}");
            Output = b.ToString();
        }
    }

    private void GeneratePathfinderWotrNaturalWeapons()
    {
        var game = Config.Instance.GetGame(GameDefinition.Pathfinder_WrathOfTheRighteous);
        var cheatDataFile = System.IO.Path.Combine(game.GameFolder, "Bundles", "cheatdata.json");
        if (!System.IO.File.Exists(cheatDataFile)) {
            Output = "Could not find cheatdata.json @ " + cheatDataFile;
        }
        var serializer = new Newtonsoft.Json.JsonSerializer();
        using (var stream = new System.IO.FileStream(cheatDataFile, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.Read))
        using (var reader = new System.IO.StreamReader(stream))
        using (var jsonReader = new Newtonsoft.Json.JsonTextReader(reader)) {
            var cheatdata = serializer.Deserialize<BlueprintMetadataContainer>(jsonReader);
            var res = (BlueprintProvider)game.GetDefinition().Resources.Blueprints;

            for (var i = cheatdata.Entries.Count-1; i >= 0; i--) {
                var entry = cheatdata.Entries[i];
                if (!entry.Path.Contains("NaturalWeapon", StringComparison.OrdinalIgnoreCase)) cheatdata.Entries.RemoveAt(i);
            }
            var b = new System.Text.StringBuilder();
            foreach (var entry in cheatdata.Entries) {
                b.Append("\"").Append(entry.Guid).AppendLine("\",");
            }
            Output = b.ToString();
        }
    }
}