@inject IGameResourcesProvider Resources

<div>
    <Modal @ref="modalEditItem">
        <Title>Edit item characteristics</Title>
        <Body>
            @if (ItemEnchantable != null) {
                <div class="row"><h3 class="col-md-12">Enchantments</h3></div>
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Level</label>
                        <input class="form-control" type="number" min="0" max="@ItemEnchantable.MaxEnchantmentLevel" @bind="ItemEnchantable.EnchantmentLevel" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <h4>
                            Current
                            <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                                You will only be able to remove enchantments that have been mapped.
                            </Help>
                        </h4>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        @foreach (var fact in ItemEnchantable.Facts.Items.OfType<EnchantmentFactItemModel>().Where(f => !f.IsLevel)) {
                            <span class="badge badge-secondary m-1">
                                @fact.DisplayName(Resources)
                                @if (!fact.IsMapped) {
                                    <button class="btn btn-sm btn-secondary" @onclick="() => CopyEnchantmentData(fact)">
                                        <span class="oi oi-paperclip"></span>
                                    </button>
                                }
                                <button class="btn btn-sm btn-secondary" @onclick="() => RemoveEnchantmentFact(fact)">
                                    &times;
                                </button>
                            </span>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <h4>
                            Add new
                            <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                                You will only be able to add enchantments that are mapped by the editor.
                            </Help>
                        </h4>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <Search TItem="EnchantmentSpec" Items="MappedEnchantments.Where(i => !ItemEnchantable.HasEnchantment(i))" ItemSearchable="b => b.Name" Context="item" OnSelect="a => ItemEnchantable.AddEnchantmentFact(a.Item)" Height="ElementSize.Small" MaxCount="10000">
                            <ResultItemTemplate>
                                @item.Name
                            </ResultItemTemplate>
                        </Search>
                    </div>
                </div>
            }
            @if (Item?.ItemType == ItemType.Usable) {
                <div class="row"><h3 class="col-md-12">Crafted item</h3></div>
                if (ItemCrafted != null) {
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Caster level</label>
                            <Help Size="ElementSize.Small" Position="TooltipPosition.BottomRight">
                                The higher the caster level the greater the duration, damage, effect.
                            </Help>
                            <input class="form-control" type="number" min="1" max="20" @bind="ItemCrafted.CasterLevel" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Spell level</label>
                            <Help Size="ElementSize.Small" Position="TooltipPosition.BottomRight">
                                For scrolls only you will need to roll 1d20 + your "Use Magic Device" against the spell level &times; 2.
                                I recommend you set this to a low value.
                            </Help>
                            <input class="form-control" type="number" min="1" max="20" @bind="ItemCrafted.SpellLevel" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Ability DC</label>
                            <Help Size="ElementSize.Small">
                                This is the DC the target must overcome.
                            </Help>
                            <input class="form-control" type="number" min="1" max="100" @bind="ItemCrafted.AbilityDC" />
                        </div>
                    </div>
                }
                else {
                    <div class="row g-3">
                        <div class="col-md-12">
                            <button class="btn btn-info" @onclick="() => UnlockCraftedItem()">
                                <span class="oi oi-lock-locked"></span>
                                Set as crafted
                            </button>
                        </div>
                    </div>
                }
            }
        </Body>
        <Footer>
            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalEditItem.CloseAsync()">Close</button>
        </Footer>
    </Modal>
</div>

@code {
    private Modal modalEditItem;

    private ItemModel Item;
    private CraftedPartItemModel ItemCrafted;
    private IEnchantableItemModel ItemEnchantable;
    private IReadOnlyList<EnchantmentSpec> MappedEnchantments;

    public async Task StartEditItemAsync(ItemModel item)
    {
        Item = item;
        ItemCrafted = item.Parts.Items.OfType<CraftedPartItemModel>().FirstOrDefault();
        ItemEnchantable = item as IEnchantableItemModel;
        MappedEnchantments = Resources.GetEnchantments(item);
        await modalEditItem.OpenAsync();
        StateHasChanged();
    }

    private void UnlockCraftedItem()
    {
        ItemCrafted = Item.SetAsCrafted();
    }

    private void CopyEnchantmentData(EnchantmentFactItemModel fact)
    {
        ElectronNET.API.Electron.Clipboard.WriteText(string.Concat(
            fact.DisplayName(Resources), Environment.NewLine,
            fact.Blueprint, Environment.NewLine,
            string.Join(Environment.NewLine, fact.Components.Keys)));
    }

    private void RemoveEnchantmentFact(EnchantmentFactItemModel fact)
    {
        ItemEnchantable.Facts.Items.Remove(fact);
    }
}