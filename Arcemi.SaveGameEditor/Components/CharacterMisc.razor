@inject CharacterViewModel Model
@inject IGameResourcesProvider Resources

@if (Character?.Resources?.PersistantResources?.Count > 0) {
    <div class="row g-3">
        <h3 class="col-md-12">Resources</h3>
    </div>
    <div class="form-list">
        <div class="row form-list-header">
            <div class="col-md-4">
                <label class="form-label">Name</label>
            </div>
            <div class="col-md-2">
                <label class="form-label">Amount</label>
            </div>
            <div class="col-md-2">
                <label class="form-label">Retain</label>
            </div>
            <div class="col-md-2">
                <Help>
                    The amount referes to how many uses you have left until you camp.
                    I'm unsure what "Retain" is used for, will leave it in the UI for now.
                </Help>
            </div>
        </div>
        @foreach (var res in Character.Resources.PersistantResources) {
        <div class="row">
            <div class="col-md-4 overflow-hidden">
                <label class="form-label">@Resources.Blueprints.GetNameOrBlueprint(res.Blueprint)</label>
            </div>
            <div class="col-md-2">
                <input type="number" class="form-control" @bind="res.Amount" />
            </div>
            <div class="col-md-2">
                <input type="number" class="form-control" @bind="res.RetainCount" />
            </div>
            <div class="col-md-2">
            </div>
        </div>
        }
    </div>
}

@code {
    [Parameter]
    public UnitEntityModel Unit { get; set; }
    private CharacterModel Character => Unit?.Descriptor;
}