@inject CharacterViewModel Model
@inject IGameResourcesProvider Resources

<div class="row g-3 top-toolbar mt-3">
    <div class="col-md-6 btn-group">
        <label class="btn btn-info" for="search">
            <span class="oi oi-magnifying-glass"></span>
        </label>
        <input id="search" type="text" class="form-control" placeholder="Search..." @bind="SearchTerm" @bind:event="oninput" />
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <button class="btn btn-sm btn-info btn-h4" @onclick="() => OpenAddFactAsync()">
            <span class="oi oi-plus"></span>
            Add @Section.Name from list
        </button>
    </div>
</div>

<div class="form-list">
    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Name</label>
        </div>
    </div>

    @foreach (var fact in Facts) {
        <div class="row">
            <div class="col-md-6 overflow-hidden">
                <label class="form-label">@fact.DisplayName</label>
            </div>
            <div class="col-md-3">
                <button class="btn btn-sm btn-danger" title="Remove @Section.Name" @onclick="() => RemoveFact(fact)">
                    <span class="oi oi-trash"></span>
                </button>
            </div>
        </div>
    }
</div>

<Modal @ref="modalAddFact">
    <Title>Add @Section.Name</Title>
    <Body>
        <TabControl StartIndex="0">
            <Tab Name="Search">
                <Content>
                    <Search TItem="IBlueprintMetadataEntry" Items="AvailableFacts" ItemSearchable="b => b.DisplayName" Context="item" OnSelect="a => AddFactBlueprint = a.Item.Id">
                        <ResultItemTemplate>
                            @item.DisplayName
                        </ResultItemTemplate>
                    </Search>
                </Content>
            </Tab>
            <Tab Name="All">
                <Content>
                    <div class="row">
                        <div class="col-md-12">
                            <label class="form-label">@Section.Name</label>
                            <select class="form-control" @bind="AddFactBlueprint">
                                <option value="">Select @Section.Name...</option>
                                @foreach (var blueprint in AvailableFacts) {
                                    <option value="@blueprint.Id">@blueprint.DisplayName</option>
                                }
                            </select>
                        </div>
                    </div>
                </Content>
            </Tab>
        </TabControl>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" disabled="@AddFactIsInvalid" @onclick="AddFactAsync">
            Confirm
        </button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddFact.CloseAsync()">Cancel</button>
    </Footer>
</Modal>

@code {
    [Parameter]
    public IGameUnitFactSection Section { get; set; }
    private IEnumerable<IGameUnitFactEntry> Facts => Section.Items
        .Where(f => SearchTerm.IsEmpty() || f.DisplayName.ILike(SearchTerm))
        .OrderBy(f => f.DisplayName);

    private IEnumerable<IBlueprintMetadataEntry> AvailableFacts => Section.Items.AvailableEntries.Where(IsValidFact).OrderBy(f => f.DisplayName);

    private string SearchTerm;

    private Modal modalAddFact;
    private string AddFactBlueprint;
    private bool AddFactIsInvalid => string.IsNullOrEmpty(AddFactBlueprint);

    private bool IsValidFact(IBlueprintMetadataEntry x)
    {
        return true;
    }

    private async Task OpenAddFactAsync()
    {
        await modalAddFact.OpenAsync();
    }

    private async Task AddFactAsync()
    {
        Section.Items.AddByBlueprint(AddFactBlueprint);
        await modalAddFact.CloseAsync();
    }

    private void RemoveFact(IGameUnitFactEntry feature)
    {
        Section.Items.Remove(feature);
    }
}