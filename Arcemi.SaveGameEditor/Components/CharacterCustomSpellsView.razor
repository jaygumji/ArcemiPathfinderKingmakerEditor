@inject IGameResourcesProvider Resources

<p class="alert alert-info">
    Add, edit, remove spells customized with metamagic.
</p>
@if (CustomSpells == null) {
    <div class="row">
        <div class="col-md-12">
            <button class="btn btn-info" @onclick="() => UnlockCustomSpells()">
                <span class="oi oi-lock-locked"></span>
                Unlock
            </button>
        </div>
    </div>
}
else {

    for (var i = 0; i < CustomSpells.Count; i++){
        var thisLevel = i;
        var arr = CustomSpells[thisLevel];
        <div class="row">
            <div class="col-md-6">
                <h4>Level @thisLevel</h4>
            </div>
            <div class="col-md-1">
                <button class="btn btn-sm btn-info btn-h4" @onclick="() => OpenAddSpellAsync(thisLevel)">
                    <span class="oi oi-plus"></span>
                </button>
            </div>
        </div>
        if (arr.Count == 0) {
            <div class="row">
                <div class="col-md-12">
                    <p class="alert alert-info">
                        No spells
                    </p>
                </div>
            </div>
        }
        else {
            foreach (var spell in arr) {
                <div class="row">
                    <div class="col-md-6">
                        @Resources.Blueprints.GetNameOrBlueprint(spell.Blueprint)
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-sm btn-secondary" @onclick="() => EditSpellAsync(spell)">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveSpell(spell)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>
            }
        }
    }

}

<Modal @ref="modalAddSpell">
    <Title>Add spell for level @AddSpellLevel</Title>
    <Body>
        <TabControl StartIndex="0">
            <Tab Name="Search">
                <Content>
                    <Search TItem="IBlueprintMetadataEntry" Items="AvailableSpellsBase" ItemSearchable="b => b.Name.DisplayName" Context="item" OnSelect="a => AddSpellBlueprint = a.Item.Id">
                        <ResultItemTemplate>
                            @item.Name.DisplayName
                        </ResultItemTemplate>
                    </Search>
                </Content>
            </Tab>
            <Tab Name="All">
                <Content>
                    <div class="row">
                        <div class="col-md-12">
                            <label class="form-label">Spell</label>
                            <select class="form-control" @bind="AddSpellBlueprint">
                                <option value="">Select spell...</option>
                                @foreach (var blueprint in AvailableSpells) {
                                    <option value="@blueprint.Id">@blueprint.DisplayName</option>
                                }
                            </select>
                        </div>
                    </div>
                </Content>
            </Tab>
        </TabControl>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" disabled="@AddSpellIsInvalid" @onclick="AddSpellAsync">
            Confirm
        </button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddSpell.CloseAsync()">Cancel</button>
    </Footer>
</Modal>

<Modal @ref="modalEditSpell">
    <Title>Edit spell @Resources.Blueprints.GetNameOrBlueprint(Spell?.Blueprint)</Title>
    <Body>
        @if (Spell != null) {
        <div class="row">
            <div class="col-md-3">
                <label class="form-label">Color</label>
                <input type="number" min="1" max="20" class="form-control" @bind="DecorationColor" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Border</label>
                <input type="number" min="1" max="11" class="form-control" @bind="DecorationBorder" />
            </div>
            <div class="col-md-3">
                <label class="form-label">
                    Cost
                    <Help Size="ElementSize.Small">
                        Unsure what this does, leaving it at zero seems safe in all scenarios.
                    </Help>
                </label>
                <input type="number" class="form-control" @bind="Spell.MetamagicData.SpellLevelCost" />
            </div>
            <div class="col-md-3">
                <label class="form-label">
                    Heighten
                    <Help Size="ElementSize.Small">
                        The number of levels to heighten the spell. Only used with the heighten metamagic.
                        E. g. a spell like Burning Arc (Level 2) with a heighten level of 5 will be a level 7 spell.
                    </Help>
                </label>
                <input type="number" class="form-control" @bind="Spell.MetamagicData.HeightenLevel" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                <MetamagicControl Metamagic="Spell.MetamagicData.Metamagic.Empower" HelpPosition="TooltipPosition.BottomRight">
                    <HelpText>
                        Spell damage is increased by 50% (Saving throws not affected).
                    </HelpText>
                </MetamagicControl>
            </div>
            <div class="col-md-2">
                <MetamagicControl Metamagic="Spell.MetamagicData.Metamagic.Maximize" HelpPosition="TooltipPosition.BottomRight">
                    <HelpText>
                        Numerical values maximized.
                    </HelpText>
                </MetamagicControl>
            </div>
            <div class="col-md-2">
                <MetamagicControl Metamagic="Spell.MetamagicData.Metamagic.Quicken" HelpPosition="TooltipPosition.BottomRight">
                    <HelpText>
                        Cast spell as a swift action.
                    </HelpText>
                </MetamagicControl>
            </div>
            <div class="col-md-2">
                <MetamagicControl Metamagic="Spell.MetamagicData.Metamagic.Extend">
                    <HelpText>
                        Duration increased by 100%.
                    </HelpText>
                </MetamagicControl>
            </div>
            <div class="col-md-2">
                <MetamagicControl Metamagic="Spell.MetamagicData.Metamagic.Heighten">
                    <HelpText>
                        Cast spells as if they were a higher level (up to a maximum of 9th level).
                        The level you put the spell in determines the effect.
                    </HelpText>
                </MetamagicControl>
            </div>
            <div class="col-md-2">
                <MetamagicControl Metamagic="Spell.MetamagicData.Metamagic.Reach">
                    <HelpText>
                        Increase the range of the spell by one range category.
                    </HelpText>
                </MetamagicControl>
            </div>
                @if (Spellbook is Arcemi.Models.PathfinderWotr.WotrGameUnitSpellBookEntry) {
                    <div class="col-md-2">
                        <MetamagicControl Metamagic="Spell.MetamagicData.Metamagic.Persistent" HelpPosition="TooltipPosition.BottomRight">
                            <HelpText>
                                Enemies must succeed their saving throws twice to resist the spell.
                            </HelpText>
                        </MetamagicControl>
                    </div>
                    <div class="col-md-2">
                        <MetamagicControl Metamagic="Spell.MetamagicData.Metamagic.Selective" HelpPosition="TooltipPosition.BottomRight">
                            <HelpText>
                                On area spells, select targets that should be excluded from the effect.
                            </HelpText>
                        </MetamagicControl>
                    </div>
                    <div class="col-md-2">
                        <MetamagicControl Metamagic="Spell.MetamagicData.Metamagic.Bolstered" HelpPosition="TooltipPosition.BottomRight">
                            <HelpText>
                                Spell now deals 2 more damage per die rolled to all targets.
                                Enemies in a 5 feet radius of spell targets take 2 damage per die rolled of the original spell.
                                Spell no longer does precision damage.
                            </HelpText>
                        </MetamagicControl>
                    </div>
                }
        </div>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalEditSpell.CloseAsync()">Done</button>
    </Footer>
</Modal>

@code {
    [Parameter]
    public IGameUnitSpellBookEntry Spellbook { get; set; }

    private ListD2Accessor<CustomSpellModel> CustomSpells => Spellbook.CustomSpells;

    private bool OrderByName = true;

    private IEnumerable<IBlueprintMetadataEntry> AvailableSpellsBase => Resources.Blueprints.GetEntries(BlueprintTypeId.Ability)
        .Where(IsValidSpell);

    private IEnumerable<IBlueprintMetadataEntry> AvailableSpells => OrderByName ? AvailableSpellsBase.OrderBy(x => x.Name.DisplayName) : AvailableSpellsBase;

    private bool IsValidSpell(IBlueprintMetadataEntry x)
    {
        return !Spells.IsSpecial(x);
    }

    private CustomSpellModel Spell;
    private bool IsHeightenActive => Spell?.MetamagicData?.Metamagic?.Heighten?.IsActive ?? false;
    private int DecorationColor { get => Spell.DecorationColorNumber + 1; set => Spell.DecorationColorNumber = value - 1; }
    private int DecorationBorder { get => Spell.DecorationBorderNumber + 1; set => Spell.DecorationBorderNumber = value - 1; }
    private Modal modalEditSpell;
    private Modal modalAddSpell;
    private string AddSpellBlueprint;
    private int AddSpellLevel;
    private bool AddSpellIsInvalid => string.IsNullOrEmpty(AddSpellBlueprint);

    private void SelectAddSpellBlueprint(IBlueprintMetadataEntry blueprint)
    {
        AddSpellBlueprint = blueprint.Id;
    }

    private void UnlockCustomSpells()
    {
        Spellbook.EnableCustomSpells();
    }

    private async Task OpenAddSpellAsync(int level)
    {
        AddSpellLevel = level;
        await modalAddSpell.OpenAsync();
    }

    private async Task AddSpellAsync()
    {
        var spell = CustomSpells.Add(AddSpellLevel, (refs, obj) => { obj.Add("MetamagicData", refs.Create()); });
        spell.Blueprint = AddSpellBlueprint;
        spell.UniqueId = Guid.NewGuid().ToString();
        spell.DecorationBorderNumber = 0;
        spell.DecorationColorNumber = 0;
        spell.MetamagicData.SpellLevelCost = 0;
        spell.MetamagicData.MetamagicMask = "";

        AddSpellBlueprint = null;
        AddSpellLevel = 0;
        await modalAddSpell.CloseAsync();

        await EditSpellAsync(spell);
    }

    private async Task EditSpellAsync(CustomSpellModel spell)
    {
        Spell = spell;
        await modalEditSpell.OpenAsync();
    }

    private void RemoveSpell(CustomSpellModel spell)
    {
        CustomSpells.Remove(spell);
    }
}
