@inject IGameResourcesProvider Resources

<div class="character-equipment-slot">
    <div class="row">
        <div class="col-md-2 item-icon">
            <img src="@(ItemEntry is object ? ItemEntry.IconUrl : ItemType.GetIconUrl())" alt="@(ItemEntry is object ? ItemEntry.Name : ItemType.DisplayName)" />
        </div>
        <div class="col-md-10">
            <div class="data-header">
                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">@Name</label>
                    </div>
                    <div class="col-md-6">
                        @if (ItemEntry is object) {
                            <div class="btn-toolbar text-nowrap" role="toolbar" aria-label="Equipment tools">
                                <button class="btn btn-sm btn-secondary" title="Copy blueprint" @onclick="() => CopyBlueprintIdentifier(ItemEntry)">
                                    <span class="oi oi-paperclip"></span>
                                </button>
                                <button class="btn btn-sm btn-secondary" title="@(ItemEntry.IsLocked ? "Unlock" : "Lock")" @onclick="() => ItemEntry.IsLocked = !ItemEntry.IsLocked">
                                    <span class="oi @(ItemEntry.IsLocked ? "oi-lock-locked" : "oi-lock-unlocked")"></span>
                                </button>
                                @if (ItemEntry.CanEdit) {
                                    <button class="btn btn-sm btn-secondary" title="Edit item" @onclick="() => Callback?.Invoke(this, new CharacterEquipmentSlotItemExecuteArgs(ItemEntry, isEdit: true))">
                                        <span class="oi oi-pencil"></span>
                                    </button>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="data-content">
                @((ItemEntry?.Name) ?? (Slot?.ItemRef) ?? "-")
            </div>
            @if (ItemEntry?.IsChargable ?? false) {
                <div class="data-footer">
                    <div class="row">
                        <div class="col-md-4">
                            <label>Charges</label>
                        </div>
                        <div class="col-md-6">
                            <input class="form-control" type="number" @bind="ItemEntry.Charges" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public IGameUnitEquippedEntry Slot { get; set; }

    [CascadingParameter]
    protected IGameInventoryModel Inventory { get; set; }

    [Parameter]
    public BlueprintTypeId ItemTypeId { get; set; }

    private BlueprintType ItemType;
    private IGameItemEntry ItemEntry;

    [Parameter]
    public Func<CharacterEquipmentSlot, CharacterEquipmentSlotItemExecuteArgs, Task> Callback { get; set; }

    protected override void OnInitialized()
    {
        ItemType = Resources.Blueprints.GetType(ItemTypeId);
    }

    protected override void OnParametersSet()
    {
        if (Slot?.ItemRef is not null) {
            ItemEntry = Inventory.FindEquipped(Slot.ItemRef);
        }
        else {
            ItemEntry = null;
        }
    }

    private void CopyBlueprintIdentifier(IGameItemEntry i)
    {
        ElectronNET.API.Electron.Clipboard.WriteText(i.Blueprint);
    }
}