@inject IGameResourcesProvider Resources;

@if (Inventory == null) {
    <p class="alert alert-warning">Inventory was not found.</p>
}
else {

    <div class="row top-toolbar">
        <div class="col-md-6 btn-group">
            <label class="btn btn-info" for="search">
                <span class="oi oi-magnifying-glass"></span>
            </label>
            <input id="search" type="text" class="form-control" placeholder="Search..." @bind="SearchTerm" @bind:event="oninput" />
        </div>
        @if (Resources.Blueprints.GetEntries(BlueprintTypeId.Item).Count > 0) {
            <InventoryAddItem Inventory="Inventory" OnItemAdded="item => StateHasChanged()" />
        }
        else if (Inventory is Arcemi.Models.PathfinderWotr.WotrGameInventoryModel) {
            <InventoryAddItemFallback Inventory="Inventory" OnItemAdded="item => StateHasChanged()" />
        }
    </div>

    <div class="form-list">
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Name</label>
            </div>
            <div class="col-md-1">
                <label class="form-label">Type</label>
            </div>
            <div class="col-md-2">
                <label class="form-label">Stack</label>
            </div>
            <div class="col-md-2">
                <label class="form-label">Charges</label>
            </div>
            <div class="col-md-3">
            </div>
        </div>
        @if (!Items.Any()) {
            <div class="row">
                <div class="col-md-12">
                    <p class="alert alert-info">Inventory is empty</p>
                </div>
            </div>
        }
        else {
            @foreach (var item in Items) {
            <div class="row">
                <div class="col-md-4 overflow-hidden">
                    <label class="form-label">@item.Name</label>
                </div>
                <div class="col-md-1">
                    <img src="@item.IconUrl" alt="@item.Type" />
                </div>
                <div class="col-md-2">
                    @if (item.IsStackable) {
                        <input class="form-control" type="number" @bind="item.Count" />
                    }
                </div>
                <div class="col-md-2">
                    @if (item.IsChargable) {
                        <input class="form-control" type="number" @bind="item.Charges" />
                    }
                </div>
                <div class="col-md-3">
    @*                <button class="btn btn-sm btn-secondary" title="Duplicate" disabled="@IsDisabledType(item.ItemType)" @onclick="() => Duplicate(item)">
                        <span class="oi oi-fork"></span>
                    </button>*@
                    <button class="btn btn-sm btn-secondary" title="Copy blueprint" @onclick="() => CopyBlueprintIdentifier(item)">
                        <span class="oi oi-paperclip"></span>
                    </button>
                    @if (item.CanEdit){
                    <button class="btn btn-sm btn-secondary" title="Edit item" @onclick="() => editItemModal.StartEditItemAsync(((Arcemi.Models.PathfinderWotr.WotrGameItemEntry)item).Ref)">
                        <span class="oi oi-pencil"></span>
                    </button>
                    }
                    <button class="btn btn-sm btn-danger" title="Remove item" @onclick="() => RemoveItem(item)">
                        <span class="oi oi-trash"></span>
                    </button>
                </div>
            </div>
            }
        }
    </div>
}

<InventoryEditItemModal @ref="editItemModal" />

@code {
    [Parameter]
    public IGameInventoryModel Inventory { get; set; }

    private InventoryEditItemModal editItemModal;
    private bool ShowInvalidItems;

    private void RemoveItem(IGameItemEntry item)
    {
        Inventory.Items.Remove(item);
    }

    private string SearchTerm;
    private IEnumerable<IGameItemEntry> Items => Inventory.Items
        .OrderByDescending(i => CalculateScore(i)).ThenBy(i => i.Index);

    private void CopyBlueprintIdentifier(IGameItemEntry i)
    {
        ElectronNET.API.Electron.Clipboard.WriteText(i.Blueprint);
    }

    private int CalculateScore(IGameItemEntry i)
    {
        var t = SearchTerm;
        if (string.IsNullOrEmpty(t)) return 0;
        bool M(string v) => string.Equals(t, v, StringComparison.OrdinalIgnoreCase);
        bool C(string v) => v != null && v.Contains(t, StringComparison.OrdinalIgnoreCase);

        var s = 0;
        if (M(i.Blueprint)) s += 200;
        if (M(i.Name)) s += 200;
        if (M(i.Type)) s += 200;
        if (C(i.Blueprint)) s += 100;
        if (C(i.Name)) s += 100;
        if (C(i.Type)) s += 100;
        if (C(i.Description)) s += 50;

        return s;
    }

    private void Duplicate(IGameItemEntry item)
    {
        Inventory.Items.Duplicate(item);
    }
}