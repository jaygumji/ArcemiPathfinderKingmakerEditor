@using System.Text
@using ElectronNET.API
@inject IGameResourcesProvider Resources

<div class="row"><h3 class="col-md-12">Appearance code</h3></div>
<div class="row">
    <div class="col-md-4">
        <button class="btn btn-info w-100" @onclick="() => Electron.Clipboard.WriteText(DollData.Export())">
            <span class="oi oi-clipboard"></span>
            Copy Code
        </button>
    </div>
    <div class="col-md-4">
        <button class="btn btn-info w-100" @onclick="() => modalImport.OpenAsync()">
            <span class="oi oi-script"></span>
            Import Code
        </button>
    </div>
    <Modal @ref="modalImport">
        <Title>Import</Title>
        <Body>
            <p>Paste the appearance code to the input below and confirm to import the appearance.</p>
            <textarea class="form-control" @bind:event="oninput" @bind="ImportScript"></textarea>
        </Body>
        <Footer>
            <button type="button" class="btn btn-info" data-dismiss="modal" disabled="@IsImportInvalid" @onclick="ImportAsync">
                Confirm
            </button>
            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalImport.CloseAsync()">Cancel</button>
        </Footer>
    </Modal>
    <div class="col-md-1">
        <Help>
            Create a new mercenary, or a new game character, and set the appearance to what you would like.<br />
            Open the save file with the created character and copy the appearance code.<br />
            Finally open the save file with the character you want to change and import the appearance code.
        </Help>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <textarea class="form-control" readonly="readonly">
            @DollData.Export()
        </textarea>
    </div>
</div>

<div class="row"><h3 class="col-md-12">Preset</h3></div>
<div class="row">
    <div class="col-md-6">
        <label class="form-label">Gender</label>
        <select class="form-control" @bind="DollData.Gender">
            @foreach (var option in DollData.GenderOptions) {
                <option value="@option.Id">@option.Name</option>
            }
        </select>
    </div>
    <div class="col-md-6">
        <label class="form-label">Race</label>
        <select class="form-control" @bind="DollData.Race">
            @foreach (var option in DollData.RaceOptions) {
                <option value="@option.Id">@option.Name</option>
            }
        </select>
    </div>
</div>

<div class="row"><h3 class="col-md-12">Equipment</h3></div>
<div class="form-list">
    <div class="row">
        <div class="col-md-9">
            <label class="form-label">Equipment entity id</label>
        </div>
        <div class="col-md-3">
            <button class="btn btn-sm btn-info" @onclick="() => modalAddEquipment.OpenAsync()">
                <span class="oi oi-plus"></span>
            </button>
            <Modal @ref="modalAddEquipment">
                <Title>Add equipment</Title>
                <Body>
                    <label class="form-label">Equipment entity id</label>
                    <input type="text" class="form-control" @bind:event="oninput" @bind="EquipmentEntityId" />
                </Body>
                <Footer>
                    <button type="button" class="btn btn-info" data-dismiss="modal" disabled="@IsEquipmentInvalid" @onclick="AddEquipmentAsync">
                        Confirm
                    </button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddEquipment.CloseAsync()">Cancel</button>
                </Footer>
            </Modal>
        </div>
    </div>
    @foreach (var equipmentEntityId in DollData.EquipmentEntityIds) {
    <div class="row">
        <div class="col-md-9">
            @equipmentEntityId
        </div>
        <div class="col-md-3">
            <button class="btn btn-sm btn-danger" @onclick="() => RemoveEquipment(equipmentEntityId)">
                <span class="oi oi-trash"></span>
            </button>
        </div>
    </div>
    }
</div>

<div class="row"><h3 class="col-md-12">Primary Styles</h3></div>
<div class="form-list">
    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Key</label>
        </div>
        <div class="col-md-3">
            <label class="form-label">Value</label>
        </div>
        <div class="col-md-3">
            <button class="btn btn-sm btn-info" @onclick="() => modalAddPrimaryStyle.OpenAsync()">
                <span class="oi oi-plus"></span>
            </button>
            <Modal @ref="modalAddPrimaryStyle">
                <Title>Add primary style</Title>
                <Body>
                    <div class="row">
                        <div class="col-md-9">
                            <label class="form-label">Key</label>
                            <input type="text" class="form-control" @bind:event="oninput" @bind="PrimaryStyleKey" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Value</label>
                            <input type="number" class="form-control" @bind="PrimaryStyleValue" />
                        </div>
                    </div>
                </Body>
                <Footer>
                    <button type="button" class="btn btn-info" data-dismiss="modal" disabled="@IsPrimaryStyleInvalid" @onclick="AddPrimaryStyle">
                        Confirm
                    </button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddPrimaryStyle.CloseAsync()">Cancel</button>
                </Footer>
            </Modal>
        </div>
    </div>
    @foreach (var style in DollData.EntityRampIdices) {
    <div class="row">
        <div class="col-md-6">
            @style.Key
        </div>
        <div class="col-md-3">
            @style.Value
        </div>
        <div class="col-md-3">
            <button class="btn btn-sm btn-danger" @onclick="() => RemovePrimaryStyle(style)">
                <span class="oi oi-trash"></span>
            </button>
        </div>
    </div>
    }
</div>

<div class="row"><h3 class="col-md-12">Secondary Styles</h3></div>
<div class="form-list">
    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Key</label>
        </div>
        <div class="col-md-3">
            <label class="form-label">Value</label>
        </div>
        <div class="col-md-3">
            <button class="btn btn-sm btn-info" @onclick="() => modalAddSecondaryStyle.OpenAsync()">
                <span class="oi oi-plus"></span>
            </button>
            <Modal @ref="modalAddSecondaryStyle">
                <Title>Add secondary style</Title>
                <Body>
                    <div class="row">
                        <div class="col-md-9">
                            <label class="form-label">Key</label>
                            <input type="text" class="form-control" @bind:event="oninput" @bind="SecondaryStyleKey" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Value</label>
                            <input type="number" class="form-control" @bind="SecondaryStyleValue" />
                        </div>
                    </div>
                </Body>
                <Footer>
                    <button type="button" class="btn btn-info" data-dismiss="modal" disabled="@IsSecondaryStyleInvalid" @onclick="AddSecondaryStyle">
                        Confirm
                    </button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddSecondaryStyle.CloseAsync()">Cancel</button>
                </Footer>
            </Modal>
        </div>
    </div>
    @foreach (var style in DollData.EntitySecondaryRampIdices) {
    <div class="row">
        <div class="col-md-6">
            @style.Key
        </div>
        <div class="col-md-3">
            @style.Value
        </div>
        <div class="col-md-3">
            <button class="btn btn-sm btn-danger" @onclick="() => RemoveSecondaryStyle(style)">
                <span class="oi oi-trash"></span>
            </button>
        </div>
    </div>
    }
</div>

<div class="row"><h3 class="col-md-12">Equipment Color</h3></div>
<div class="row">
    <div class="col-md-4">
        <label class="form-label">Clothes Primary</label>
        <input type="number" class="form-control" min="-1" @bind="DollData.ClothesPrimaryIndex" />
    </div>
    <div class="col-md-4">
        <label class="form-label">Clothes Secondary</label>
        <input type="number" class="form-control" min="-1" @bind="DollData.ClothesSecondaryIndex" />
    </div>
</div>

@code {
    [Parameter]
    public IGameUnitDollModel DollData { get; set; }

    private Modal modalImport;
    private string ImportScript;
    private bool IsImportInvalid
    {
        get {
            var script = ImportScript?.Trim();
            if (string.IsNullOrEmpty(script)) return true;
            try {
                var bytes = Convert.FromBase64String(script);
                var text = Encoding.UTF8.GetString(bytes);
                if (string.IsNullOrEmpty(text)) return true;
            }
            catch (Exception) {
                return true;
            }
            return false;
        }
    }

    private Modal modalAddEquipment;
    private string EquipmentEntityId;
    private bool IsEquipmentInvalid => EquipmentEntityId == null || EquipmentEntityId.Length != 32;

    private Modal modalAddPrimaryStyle;
    private string PrimaryStyleKey;
    private int PrimaryStyleValue;
    private bool IsPrimaryStyleInvalid => PrimaryStyleKey == null || PrimaryStyleKey.Length != 32;

    private Modal modalAddSecondaryStyle;
    private string SecondaryStyleKey;
    private int SecondaryStyleValue;
    private bool IsSecondaryStyleInvalid => SecondaryStyleKey == null || SecondaryStyleKey.Length != 32;

    private async Task ImportAsync()
    {
        await modalImport.CloseAsync();
        DollData.Import(ImportScript);
        ImportScript = null;
    }

    private void RemoveEquipment(string equipmentEntityId)
    {
        DollData.EquipmentEntityIds.Remove(equipmentEntityId);
    }

    private async Task AddEquipmentAsync()
    {
        await modalAddEquipment.CloseAsync();
        DollData.EquipmentEntityIds.Add(EquipmentEntityId);
        EquipmentEntityId = null;
    }

    private void RemovePrimaryStyle(GameKeyValueEntry<int> style)
    {
        DollData.RemoveEntityRampIdices(style);
    }

    private async Task AddPrimaryStyle()
    {
        await modalAddPrimaryStyle.CloseAsync();
        DollData.AddEntityRampIdices(new GameKeyValueEntry<int>(PrimaryStyleKey, PrimaryStyleValue));
        PrimaryStyleKey = null;
        PrimaryStyleValue = 0;
    }

    private void RemoveSecondaryStyle(GameKeyValueEntry<int> style)
    {
        DollData.RemoveEntitySecondaryRampIdices(style);
    }

    private async Task AddSecondaryStyle()
    {
        await modalAddSecondaryStyle.CloseAsync();
        DollData.AddEntitySecondaryRampIdices(new GameKeyValueEntry<int>(SecondaryStyleKey, SecondaryStyleValue));
        SecondaryStyleKey = null;
        SecondaryStyleValue = 0;
    }
}