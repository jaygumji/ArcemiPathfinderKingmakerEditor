@implements ITabController

<CascadingValue Value="(ITabController)this">
    @ChildContent
    <ul class="nav nav-tabs" role="tablist">
        @foreach (var tab in Tabs) {
            <li class="nav-item" role="tab">
                <button class="nav-link @(tab.Index == CurrentIndex ? "active" : "")" @onclick="async () => await SelectTabAsync(tab)">@tab.Name</button>
            </li>
        }
    </ul>
    <div class="tab-content">
        @foreach (var tab in Tabs) {
            <div class="tab-pane @(tab.Index == CurrentIndex ? "show active" : "fade")">
                @if (tab.Index == CurrentIndex) {
                    @tab.Content
                }
            </div>
        }
    </div>
</CascadingValue>

@code{
    private readonly List<ITabControl> Tabs = new List<ITabControl>();

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int StartIndex { get; set; } = 0;

    public int CurrentIndex { get; set; } = -1;

    [Parameter]
    public EventCallback<TabIndexChangedArgs> OnIndexChanged { get; set; }

    protected override void OnInitialized()
    {
        CurrentIndex = StartIndex;
    }

    private async Task SelectTabAsync(ITabControl tab)
    {
        var newIndex = tab.Index;
        var oldIndex = CurrentIndex;
        CurrentIndex = tab.Index;
        await OnIndexChanged.InvokeAsync(new TabIndexChangedArgs(tab, newIndex, oldIndex));
    }

    void ITabController.Attach(ITabControl tab)
    {
        tab.Index = Tabs.Count;
        Tabs.Add(tab);
        StateHasChanged();
    }

    void ITabController.Detach(ITabControl tab)
    {
        Tabs.Remove(tab);
    }

    void ITabController.ForceRefresh() => StateHasChanged();
}