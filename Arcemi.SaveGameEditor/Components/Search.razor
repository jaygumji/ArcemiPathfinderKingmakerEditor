@typeparam TItem

<div class="row">
    <div class="col-md-12">
        @if (HeaderText.HasValue()) {
        <label class="form-label">@HeaderText</label>
        }
        <div class="btn-group w-100">
            <label class="btn btn-info">
                <span class="oi oi-magnifying-glass"></span>
            </label>
            <input type="text" class="form-control" @bind:event="oninput" @bind="Term" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <ul class="search-result @GeneratedClasses">
            @foreach (var item in FilteredItems) {
                <li class="@(item.Equals(Current) ? "toggled" : "")" @onclick="() => SelectAsync(item)">
                    @ResultItemTemplate.Invoke(item)
                </li>
            }
        </ul>
    </div>
</div>

@code {
    [Parameter]
    public string HeaderText { get; set; }

    [Parameter]
    public ElementSize Height { get; set; } = ElementSize.Medium;

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public RenderFragment<TItem> ResultItemTemplate { get; set; }

    [Parameter]
    public EventCallback<SearchSelectArgs<TItem>> OnSelect { get; set; }

    [Parameter]
    public Func<TItem, string> ItemSearchable { get; set; }

    [Parameter]
    public int MaxCount { get; set; } = 300;

    public string Term { get; private set; }
    public TItem Current { get; private set; }

    private string GeneratedClasses
    {
        get {
            if (Height == ElementSize.Small) {
                return "sm";
            }
            else if (Height == ElementSize.ExtraLarge) {
                return "xl";
            }
            return "";
        }
    }

    private IEnumerable<TItem> FilteredItems => Term.HasValue()
        ? Items.Where(x => ItemSearchable(x).ILike(Term) || (x is IBlueprintMetadataEntry e && e.Id.IEq(Term))).Take(300)
        : Items.Take(MaxCount);

    private async Task SelectAsync(TItem item)
    {
        Current = item;
        await OnSelect.InvokeAsync(new SearchSelectArgs<TItem>(item));
    }
}