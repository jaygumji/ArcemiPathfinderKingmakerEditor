@inject CharacterViewModel Model

<div class="row">
    @if (Unit.Type == UnitEntityType.Pet) {
        <div class="col-md-4 form-group">
            <label class="form-label">Owner</label>
            <input class="form-control" type="text" readonly="readonly" value="@(Model.GetOwnerOf(Unit)?.Name ?? "N/A")" />
        </div>
    }
    else if (Unit.Race.IsSupported) {
        <div class="col-md-4 form-group">
            <label class="form-label">Race</label>
            <input class="form-control" type="text" readonly="readonly" value="@Unit.Race.DisplayName" />
        </div>
    }
    <div class="col-md-4 form-group">
        <label class="form-label">Voice</label>
        @if (Unit.Asks.IsSupported) {
            <select class="form-control" @bind="Unit.Asks.Custom">
                <option value="">Default</option>
                @foreach (var blueprint in Model.Resources.Blueprints.GetEntries(BlueprintTypeId.UnitAsksList).OrderBy(b => b.DisplayName)) {
                    <option value="@blueprint.Id">@blueprint.DisplayName</option>
                }
            </select>
        }
        else {
            <select class="form-control">
                <option value="" selected="selected">Default</option>
            </select>
        }
    </div>
    <div class="col-md-4 form-group">
        <label class="form-label">Type</label>
        <input class="form-control" type="text" readonly="readonly" value="@Unit.Type.ToString().AsDisplayable()" />
    </div>
    @if (Unit.Companion.IsSupported) {
        <div class="col-md-4 form-group">
            <label class="form-label">State</label>
            <div class="input-group">
                <select class="form-control" disabled="@Unit.Companion.IsReadOnly" @bind="Unit.Companion.State">
                    @foreach (var state in Unit.Companion.AllStates) {
                        <option value="@state.Value">@state.Name</option>
                    }
                </select>
                @if (Unit.Companion.IsDialogEnabled && !Unit.Companion.IsInParty) {
                    <button class="btn btn-info input-group-append" @onclick="OpenEditCompanionStateAsync">
                        @if (Unit.Companion.IsExCompanion){
                            <span class="oi oi-plus"></span>
                        }
                        else {
                            <span class="oi oi-pencil"></span>
                        }
                    </button>
                }
            </div>
        </div>
    }
</div>

@if (Model.IsPlayerButNotMainCharacter(Unit)) {
    <div class="row">
        <div class="col-md-3">
            <button class="btn btn-info w-100" @onclick="() => Model.SetAsHero(Unit)" title="You are not set as the main character, fix it by pressing this button">
                <span class="oi oi-wrench"></span>
                Main Char
            </button>
        </div>
    </div>
}

@if (Unit.Progression.IsSupported){
    <div class="row">
        <div class="col-md-4 form-group">
            <label class="form-label">Experience</label>
            <input class="form-control" type="number" @bind="@Unit.Progression.Experience" />
        </div>
        <div class="col-md-2 form-group">
            <label class="form-label">
                Level
                @if (Unit.Progression.IsLevelReadOnly) {
                    <Help Size="ElementSize.Small">
                        The save game file does not save your current level, it is calculated based on the experience of your characters.
                    </Help>
                }
                else {
                    <Help Size="ElementSize.Small">
                        You can not increase the level, it would break the progression selections.
                    </Help>
                }
            </label>
            <input class="form-control" type="number" readonly="@Unit.Progression.IsLevelReadOnly" @bind="@Unit.Progression.CurrentLevel" min="1" max="@Unit.Progression.CurrentLevel" />
        </div>
        @foreach (var ultimate in Unit.Progression.Ultimates) {
            <div class="col-md-2 form-group">
                <label class="form-label" title="@ultimate.Name level (@ultimate.MinLevel-@ultimate.MaxLevel)">@ultimate.Name</label>
                <input class="form-control" type="number" min="@ultimate.MinLevel" max="@ultimate.MaxLevel" title="@ultimate.Name level (@ultimate.MinLevel-@ultimate.MaxLevel)" @bind="ultimate.Level" />
            </div>
        }
    </div>
    @if (Unit.Overview is not null) {
        <GameData Data="Unit.Overview"></GameData>
    }

    @if (Unit.Progression.IsSupported) {
        <div class="row">
            <h3 class="col-md-12">Selections</h3>
        </div>

        @if (Unit.Progression.IsSelectionsRepairable) {
            <AlertInfo>
                Missing initial progression selections on character, do you wish to attempt a repair?
            </AlertInfo>
            <div class="row">
                <div class="col-md-3">
                    <button class="btn btn-info w-100" @onclick="() => Unit.Progression.RepairSelections()" title="Repair initial progression selections">
                        <span class="oi oi-wrench"></span>
                        Repair
                    </button>
                </div>
            </div>
        }
        @if (Unit.Progression.Selections.Count > 0) {
            <AlertInfo>
                <p>
                    Changing the career path (Archetype) is best used either by doing it just after a respec, or at the same time change the level of the character to level 1.
                    If you change it on a character above level 1 without changing the level you will need to do manual changes or the game UI can be locked.
                </p>
                <p>
                    Note that when changing career path (Archetype) on companions, some selections might be locked during level up and you need to select something else.
                    You need to go to Facts > Features and change this manually afterwards or accept that some selections can't be changed.
                </p>
            </AlertInfo>
            <div class="row">
                @foreach (var sel in Unit.Progression.Selections.Where(s => s.IsCreation)) {
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body overflow-hidden text-nowrap">
                                <h5 class="card-title">@sel.Name</h5>
                                <p class="card-text">
                                    <select class="form-control" disabled="@sel.IsReadOnly" @bind="sel.Feature">
                                        @foreach (var option in sel.Options) {
                                            <option value="@option.Id">@option.Name</option>
                                        }
                                    </select>
                                </p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        @if (Unit.Progression.Data is object) {
            <GameData Data="@Unit.Progression.Data"></GameData>
        }
    }

    @if (Unit.Progression.Classes.Count > 0) {
        <div class="row">
            <h3 class="col-md-12">Classes</h3>
        </div>
        <div class="form-list static-content">
            <div class="row">
                <div class="col-md-4">
                    <label class="form-label">Name</label>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Specialization</label>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Level</label>
                </div>
                <div class="col-md-2">
                </div>
            </div>

            @foreach (var cls in Unit.Progression.Classes) {
                <div class="row">
                    <div class="col-md-4 overflow-hidden">
                        <label class="form-label">@cls.Name</label>
                    </div>
                    <div class="col-md-4 overflow-hidden">
                        <label class="form-label">@cls.SpecializationName</label>
                    </div>
                    <div class="col-md-2">
                        <input class="form-control" type="number" readonly="readonly" value="@cls.Level" />
                    </div>
                    @if (Unit is Arcemi.Models.PathfinderWotr.WotrGameUnitModel) {
                        <div class="col-md-2">
                            <button class="btn btn-sm btn-warning" disabled="@cls.IsReadOnly" @onclick="() => cls.Level--">
                                <span class="oi oi-arrow-thick-bottom"></span>
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
    }
}

<Modal @ref="modalEditCompanionState">
    <Title>Replace the selected party member</Title>
    <Body>
        <ul class="portraits">
            @foreach (var unit in Model.Characters.Where(c => c.Type.IsDisplayedInCharactersPage() && c.Companion.IsInParty && (c.Type == UnitEntityType.Companion || c.Type == UnitEntityType.Mercenary))) {
                <li @onclick="() => SelectedReplaceCompanion = unit" class="@(SelectedReplaceCompanion == unit ? "toggled" : "")" title="@unit.Name">
                    <img src="file://@unit.Portrait.Path" alt="Portrait" />
                    <span>@(unit.CustomName ?? unit.Name)</span>
                </li>
            }
        </ul>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" disabled="@ConfirmCompanionStateIsDisabled" @onclick="ConfirmCompanionStateAsync">
            Confirm
        </button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalEditCompanionState.CloseAsync()">Cancel</button>
    </Footer>
</Modal>

<CharacterAlignment Unit="Unit"></CharacterAlignment>

@code {
    [Parameter]
    public IGameUnitModel Unit { get; set; }

    private Modal modalEditCompanionState;
    private IGameUnitModel SelectedReplaceCompanion;
    private bool ConfirmCompanionStateIsDisabled => SelectedReplaceCompanion is null;
    private async Task OpenEditCompanionStateAsync()
    {
        if (Unit.Companion.IsExCompanion) {
            Unit.AddToRetinue();
            return;
        }
        SelectedReplaceCompanion = null;
        await modalEditCompanionState.OpenAsync();
    }
    private async Task ConfirmCompanionStateAsync(){
        SelectedReplaceCompanion.ReplacePartyMemberWith(Unit);
        await modalEditCompanionState.CloseAsync();
    }
}