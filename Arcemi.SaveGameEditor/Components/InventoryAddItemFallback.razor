@inject IGameResourcesProvider Resources

<div class="col-md-1">
    <button class="btn btn-primary" @onclick="() => addItemModal.OpenAsync()">
        <span class="oi oi-plus"></span>
    </button>
    <Modal @ref="addItemModal">
        <Title>Add a new item</Title>
        <Body>
            <div class="row g-3">
                <div class="col-md-12">
                    <label for="add-item-blueprint" class="form-label">Blueprint</label>
                    <input id="add-item-blueprint" type="text" class="form-control" @bind="AddItemBlueprint" />
                </div>
            </div>
            <div class="row g-3">
                <div class="col-md-12">
                    <label for="add-item-type" class="form-label">Item type</label>
                    <select id="add-item-type" class="form-control" @bind="AddItemType">
                        <option value="">Select item type...</option>
                        @foreach (var type in AllItemTypes) {
                            <option value="@type.Key">@type.Value</option>
                        }
                    </select>
                </div>
            </div>
        </Body>
        <Footer>
            <button type="button" class="btn btn-primary" data-dismiss="modal" disabled="@IsItemInputInvalid" @onclick="() => AddItemAsync()">Confirm</button>
            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => addItemModal.CloseAsync()">Cancel</button>
        </Footer>
    </Modal>
</div>

@code{
    private Modal addItemModal;
    private string AddItemBlueprint;
    private ItemType? AddItemType;

    private bool IsItemInputInvalid => string.IsNullOrEmpty(AddItemBlueprint) || AddItemType == null;

    [Parameter]
    public InventoryModel Inventory { get; set; }

    [Parameter]
    public EventCallback<ItemModel> OnItemAdded { get; set; }

    private static bool IsDisabledType(ItemType? itemType)
    {
        if (itemType == null) return true;
        return itemType == ItemType.Weapon
            || itemType == ItemType.Armor
            || itemType == ItemType.Shield;
    }

    private List<KeyValuePair<ItemType, string>> AllItemTypes = InventoryViewModel.ItemTypeStaticList
        .Where(x => !IsDisabledType(x.Key)).ToList();

    private async Task AddItemAsync()
    {
        var item = Inventory.AddItem(Resources, AddItemType.Value, AddItemBlueprint);
        await addItemModal.CloseAsync();
        AddItemType = null;
        AddItemBlueprint = null;
        await OnItemAdded.InvokeAsync(item);
    }
}