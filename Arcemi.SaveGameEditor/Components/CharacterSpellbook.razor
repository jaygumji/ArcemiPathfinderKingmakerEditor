@inject CharacterViewModel Model
@inject IGameResourcesProvider Resources

@if (Unit is Arcemi.Models.PathfinderWotr.WotrGameUnitModel && !Character.HasTricksterSpellbook()) {
    <div class="row">
        <div class="col-md-12">
            <button class="btn btn-info" @onclick="() => Character.CreateTricksterSpellbook()">
                <span class="oi oi-plus"></span>
                Add Trickster Wizard Spellbook
                <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                    Make any character a wizard, add the trickster wizard spellbook that is normally accessed by trickster mythic path.
                </Help>
            </button>
        </div>
    </div>
}

@if (!Unit.SpellCaster.SpellBooks.Any()) {
    <p class="alert alert-info">Character has no spellbooks.</p>
}
else {
    if (Unit.SpellCaster.BonusSpells.IsSupported) {
        <div class="row g-3">
            <div class="col-md-12">
                <h3>
                    Bonus Spells
                    <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                        This works with both regular spell slots and spontaneous slots.<br />
                        However it does not work for mythic spellbooks.
                    </Help>
                </h3>
            </div>
        </div>
        @if (!Unit.SpellCaster.BonusSpells.IsUnlocked) {
            <button class="btn btn-info" @onclick="() => Unit.SpellCaster.BonusSpells.Unlock()">
                <span class="oi oi-lock-locked"></span>
                Unlock
            </button>
        }
        else {
            <SpellIndexAccessorView Accessors="Unit.SpellCaster.BonusSpells.Accessors" />
        }
    }

    @foreach (var spellbook in Unit.SpellCaster.SpellBooks) {
        <div class="row">
            <div class="col-md-12">
                <h3>@spellbook.Name</h3>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                <label class="form-label">Level</label>
                <input type="number" class="form-control" @bind="spellbook.Level" />
            </div>
            @if (spellbook.IsModifierSupported) {
                <div class="col-md-2">
                    <label class="form-label">@spellbook.ModifierName</label>
                    <input type="number" class="form-control" @bind="spellbook.Modifier" />
                </div>
            }
            @if (spellbook.Type.HasValue()) {
                <div class="col-md-4">
                    <label class="form-label">Type</label>
                    <input type="text" class="form-control" readonly="readonly" value="@spellbook.Type.AsDisplayable()" />
                </div>
            }
        </div>
        @if (spellbook.OppositionSchools?.Count > 0) {
            <div class="row">
                <div class="col-md-12">
                    <h3>
                        Opposition schools
                        <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                            If you remove the opposition school, you also need to remove the opposition school feature.
                        </Help>
                    </h3>
                </div>
            </div>
            foreach (var oppositionSchool in spellbook.OppositionSchools) {
                <div class="row">
                    <div class="col-md-3">@oppositionSchool</div>
                    <div class="col-md-1">
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveOppositionSchool(spellbook, oppositionSchool)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>
            }
        }

        <AccordionContainer>
            @if (spellbook.SpontaneousSlots is not null) {
                <Accordion HeaderText="Spontaneous Slots">
                    <p class="alert alert-info">This is the available number of slots until you rest.
                        You can set this to above your maximum slots, but it will reset after a rest.</p>
                    <SpellIndexAccessorView Accessors="spellbook.SpontaneousSlots" />
                </Accordion>
            }
            <Accordion HeaderText="Known spells">
                <p class="alert alert-info">
                    It's possible to add spells like fireball, haste etc as cantrips (lvl 0).
                    It will appear as a cantrip in game with no cast limit.<br />
                    Some spells listed will not work for different reasons, feel free to experiment.
                </p>
                <CharacterLearnedSpellsView LearnedSpells="spellbook.KnownSpells" />
            </Accordion>
            @if (spellbook.SpecialLists?.Count > 0) {
                <Accordion HeaderText="Special spells">
                    <div class="row">
                        <div class="col-md-12">
                            <p class="alert alert-info">
                                @GetSpecialListsInfo(spellbook)
                            </p>
                        </div>
                    </div>
                    <CharacterLearnedSpellsView LearnedSpells="spellbook.SpecialSpells" />
                </Accordion>
            }
            <Accordion HeaderText="Custom spells">
                <CharacterCustomSpellsView Spellbook="spellbook" />
            </Accordion>
            @if (spellbook.MagicInfusions is not null) {
                <Accordion HeaderText="Magic Infusions">
                    <CharacterMagicInfusionSpellsView Spellbook="spellbook" />
                </Accordion>
            }
            @if (spellbook.MemorizedSpells?.Count > 0) {
                <Accordion HeaderText="Memorized Spells">
                    <CharacterMemorizedSpellsView Spellbook="spellbook" />
                </Accordion>
            }
        </AccordionContainer>
    }
}

@code {
    [Parameter]
    public IGameUnitModel Unit { get; set; }
    private CharacterModel Character => Unit?.Ref.Descriptor;

    private bool HasSpellBooks => Character.Spellbooks?.Count > 0;

    // Doesn't seem to do anything
    private bool IsBonusSpellSlotsAvailable => false; // spellbook.BonusSpellSlots?.Count > 0

    private string GetSpecialListsInfo(IGameUnitSpellBookEntry spellbook)
    {
        return string.Join("<br />", spellbook.SpecialLists.Select(x => Resources.Blueprints.GetNameOrBlueprint(x)));
    }

    private void RemoveOppositionSchool(IGameUnitSpellBookEntry spellbook, string oppositionSchool)
    {
        spellbook.OppositionSchools.Remove(oppositionSchool);
    }
}