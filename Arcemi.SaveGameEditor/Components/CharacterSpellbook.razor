@inject CharacterViewModel Model
@inject IGameResourcesProvider Resources

@if (!Character.HasTricksterSpellbook()) {
    <div class="row">
        <div class="col-md-12">
            <button class="btn btn-info" @onclick="() => Character.CreateTricksterSpellbook()">
                <span class="oi oi-plus"></span>
                Add Trickster Wizard Spellbook
                <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                    Make any character a wizard, add the trickster wizard spellbook that is normally accessed by trickster mythic path.
                </Help>
            </button>
        </div>
    </div>
}

@if (!HasSpellBooks) {
    <p class="alert alert-info">Character has no spellbooks.</p>
}
else {
    <div class="row g-3">
        <div class="col-md-12">
            <h3>
                Bonus Spells
                <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                    This works with both regular spell slots and spontaneous slots.<br/>
                    However it does not work for mythic spellbooks.
                </Help>
            </h3>
        </div>
    </div>
    @if (UnitExtraSpellsPerDayPart == null) {
        <button class="btn btn-info" @onclick="() => UnlockUnitExtraSpellsPerDay()">
            <span class="oi oi-lock-locked"></span>
            Unlock
        </button>
    }
    else {
        <SpellIndexAccessorView Accessors="UnitExtraSpellsPerDayPart.BonusSpellsAccessors" />
    }

    @foreach (var spellbook in Character.Spellbooks.Select(sb => sb.Value)) {
        <div class="row">
            <div class="col-md-12">
                <h3>@spellbook.DisplayName(Resources)</h3>
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                <label class="form-label">Level</label>
                <input type="number" class="form-control" @bind="spellbook.BaseLevelInternal" />
            </div>
            <div class="col-md-2">
                <label class="form-label">Mythic</label>
                <Help Size="ElementSize.Small">
                    This is only used for combined spellbooks
                </Help>
                <input type="number" class="form-control" @bind="spellbook.MythicLevelInternal" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Type</label>
                <input type="text" class="form-control" readonly="readonly" value="@spellbook.Type.AsDisplayable()" />
            </div>
            <div class="col-md-4">
                <div><label class="form-label">&nbsp;</label></div>
                @if (HasMemorizedSpells(spellbook)) {
                    <button class="btn btn-secondary" disabled="@IsAllMemorizedSpellsAvailable(spellbook)" @onclick="() => RestoreMemorizedSpells(spellbook)">
                        Restore Spells
                    </button>
                }
            </div>
        </div>
        @if (spellbook.OppositionSchools?.Count > 0) {
            <div class="row">
                <div class="col-md-12">
                    <h3>
                        Opposition schools
                        <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                            If you remove the opposition school, you also need to remove the opposition school feature.
                        </Help>
                    </h3>
                </div>
            </div>
            foreach (var oppositionSchool in spellbook.OppositionSchools) {
                <div class="row">
                    <div class="col-md-3">@oppositionSchool</div>
                    <div class="col-md-1">
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveOppositionSchool(spellbook, oppositionSchool)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>
            }
        }

        <AccordionContainer>
            @if (IsBonusSpellSlotsAvailable) {
                <Accordion HeaderText="Bonus Slots">
                    <SpellIndexAccessorView Accessors="spellbook.BonusSpellSlotsAccessors" />
                </Accordion>
            }
            @if (spellbook.SpontaneousSlots?.Count > 0) {
                <Accordion HeaderText="Spontaneous Slots">
                    <p class="alert alert-info">This is the available number of slots until you rest.
                        You can set this to above your maximum slots, but it will reset after a rest.</p>
                    <SpellIndexAccessorView Accessors="spellbook.SpontaneousSlotsAccessors" />
                </Accordion>
            }
            <Accordion HeaderText="Known spells">
                <p class="alert alert-info">
                    It's possible to add spells like fireball, haste etc as cantrips (lvl 0).
                    It will appear as a cantrip in game with no cast limit.<br />
                    Some spells listed will not work for different reasons, feel free to experiment.
                </p>
                <CharacterLearnedSpellsView LearnedSpells="spellbook.KnownSpells" />
            </Accordion>
            @if (spellbook.SpecialLists?.Count > 0) {
                <Accordion HeaderText="Special spells">
                    <div class="row">
                        <div class="col-md-12">
                            <p class="alert alert-info">
                                @GetSpecialListsInfo(spellbook)
                            </p>
                        </div>
                    </div>
                    <CharacterLearnedSpellsView LearnedSpells="spellbook.SpecialSpells" />
                </Accordion>
            }
            <Accordion HeaderText="Custom spells">
                <CharacterCustomSpellsView Spellbook="spellbook" />
            </Accordion>
        </AccordionContainer>
    }
}

@code {
    [Parameter]
    public UnitEntityModel Unit { get; set; }
    private CharacterModel Character => Unit?.Descriptor;

    private UnitExtraSpellsPerDayPartItemModel UnitExtraSpellsPerDayPart => Unit.Parts.Items
        .OfType<UnitExtraSpellsPerDayPartItemModel>()
        .FirstOrDefault();

    private bool HasSpellBooks => Character.Spellbooks?.Count > 0;

    // Doesn't seem to do anything
    private bool IsBonusSpellSlotsAvailable => false; // spellbook.BonusSpellSlots?.Count > 0

    private void UnlockUnitExtraSpellsPerDay()
    {
        UnitExtraSpellsPerDayPartItemModel.AddTo(Unit.Parts);
    }

    private string GetSpecialListsInfo(CharacterSpellbookModel spellbook)
    {
        return string.Join("<br />", spellbook.SpecialLists.Select(x => Resources.Blueprints.GetNameOrBlueprint(x)));
    }

    private void RemoveOppositionSchool(CharacterSpellbookModel spellbook, string oppositionSchool)
    {
        spellbook.OppositionSchools.Remove(oppositionSchool);
    }

    private bool HasMemorizedSpells(CharacterSpellbookModel spellbook)
    {
        return spellbook?.MemorizedSpells?.Any(x => x.Any(s => s.Spell != null)) ?? false;
    }

    private bool IsAllMemorizedSpellsAvailable(CharacterSpellbookModel spellbook)
    {
        return spellbook?.MemorizedSpells?.All(x => x.All(s => s.Spell == null || s.Available)) ?? true;
    }

    private void RestoreMemorizedSpells(CharacterSpellbookModel spellbook)
    {
        foreach (var spell in spellbook.MemorizedSpells.SelectMany(x => x).Where(s => s.Spell != null && !s.Available)) {
            spell.Available = true;
        }
    }
}